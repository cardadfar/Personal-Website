{
  "key": {
    "t": "title",
    "s": "subtitle",
    "i": "img",
    "d": "img description",
    "p": "text"
  },

  "t_0": "Hibikase.",
  "p_1": "Hibikase is a result of experimenting with a custom glitch effect on typography. Using displacement maps, noise & grain, light bursts, & wireframes, all centralized within After Effects, I was able to play with the parameters of the glitch to use as adjustment layers and transition effects.",
  "s_2": "Custom Glitch Effect",
  "p_4": "I first generated a noise & grain filter with dimensions averaging 4000x700, high contrast, and low brightness. Using expressions, I animated the evolution to 2000*time within a composition of 5fps. Every frame, the noise and grain changes rapidly.",
  "i_5": "hibikase/noise-grain.gif",
  "d_5": "Generating a displacement field using noise & grain",
  "p_6": "I let this composition run for a good minute so I wouldn't have to worry about the noise & grain running out during part of the video.",
  "p_7": "Outside of the composition, I had 3 layers: a text layer, the noise & grain composition, and an adjustment layer with a displacement map filter. Setting the noise & grain composition as the displacement map layer and the max vertical & horizontal displacement to right below 200, I could begin to see the effects that the displacement layer had on the text.",
  "i_8": "hibikase/text-glitch-01.gif",
  "d_8": "Displacement map glitch applied to the entire text layer",
  "p_9": "Unfortunately, the effect was too strong since it made the text unreadable. To counter this, I masked portions of the displacement layer to localize the glitch. I did this by applying one mask per adjustment layer, and copying each adjustment layer, making sure to transform the mask so that each layer would have a rectangular mask of a different size at a different location.",
  "p_10": "To get more out of the displacement maps, I animated their positions and scales randomly over time. This provided more diversity and less predictability of the glitch.",
  "p_11": "To get more out of the displacement maps, I animated their positions and scales randomly over time. This provided more diversity and less predictability of the glitch.",
  "i_12": "hibikase/text-glitch-02.gif",
  "d_12": "Randomly distributing glitch effect over time",
  "p_13": "While the text can be made out, the motionless text doesn't deliver enough action. I separate each text layer by character and animate their position over time to replicate a jittery effect within the text itself.",
  "i_14": "hibikase/text-glitch-03.gif",
  "d_14": "Animating character positions individually",
  "p_15": "Between scenes where the text changes, I apply an additional displacement map adjustment layer that spans over the entire screen. This deconstructs the text, allowing for a nice transition into the next scene.",
  "s_16": "Background Composition",
  "p_17": "The construction of the chorus background begun with a pink outwards purple radial gradient solid and multiple adjustment layers with various color toner and brightnesses. The adjustment layers were masked into fragments such that:",
  "l_18": "Each mask was at edge with another layer's mask.",
  "l_19": "No two neighboring masks shared the same toner or brightnesses values.",
  "p_20": "This was essential in being able to differentiate different regions from one another without there being any stroke or divider between regions of the mask. The adjustment layers collectively preserved the radial gradient of the original solid while dividing the canvas into noticeable shards.",
  "i_21": "hibikase/background-01.png",
  "d_21": "Construction of background using radial gradient and adjustment layer masks",
  "p_22": "From there, I generated a long stream of lines that cut through the canvas randomly. I animated the position of the points in such a manner that the points were always outside of the screen (all that would be visible would be lines, no vertexes). The points would gradually move in an arbitrary direction, and every so often they would scatter and completely change position every time a new text segment would be loaded.",
  "i_23": "hibikase/background-02.gif",
  "d_23": "Procedurally animating lines over time",
  "p_24": "The adjustment layers used to create the background were overlayed over everything, meaning not only would the background be divided into different chunks of color and brightness, but so would every other shape.",
  "p_25": "Beneath the vectors, I added an additional waveform mapped to the audio source, making sure the colors matched to that of the background gradient.",
  "p_26": "Atop the vectors and waveform, I placed the text compositions, giving the text a light to dark blue radial gradient ramp and translucent pink/purple drop shadow.",
  "i_27": "hibikase/glitchy-text.png",
  "d_27": "Colorized text composition",
  "p_28": "To sync it more with the audio, I added an additional adjustment layer on top with a light burst effect that I would enabled at every audio peak.",
  "s_29": "Cube Waveform",
  "p_30": "During the break in the chorus, I created a few radial waveforms with a 3D cube in the center. The 3D cube is a separate composition composed of 2D solids in 3D space parented to a central null object. The cube's rotation is animated randomly, making sure the keyframe interpolation is set to auto bezier.",
  "p_31": "Around the cube are multiple radial waveforms. Farther waveforms have lower opacities.",
  "i_32": "hibikase/cube-glitch.gif",
  "d_32": "Animated loop of cube waveform animation",
  "p_33": "On top of the waveforms there is an additional group of adjustment layers adding glitch effects as there were with the text",
  "s_34": "Wireframe Scripting",
  "p_35": "For the section before the chorus, I generated grid-like wireframes in as a background for the text. After vectoring out a plus sign, I used 2 repeaters to repeat the symbol over the x and y axis to construct a grid.",
  "p_36": "Beneath the grid, I wrote an extendscript that added a few shape layers, each with their own shape consisting of multiple vectors spanning over the grid. The script's logic is as follows:",
  "l_37": "If this is the first iteration, pick a random (x,y) coordinate on the canvas. Otherwise, resume at the the most recent vertex",
  "l_38": "Pick a random distance d in [-k,k] to travel, where k is the upper bound",
  "l_39": "For odd numbered iterations, add a vertex at (x+k,y). Otherwise, add a vertex at (x,y+k)",
  "l_40": "Repeat for another s iterations",
  "i_40": "hibikase/wireframe-script.png",
  "d_40": "Wireframe creation script",
  "p_41": "Repeating this m amount of times will generate m different shape layers, each with a shape of (s+1) vertexes, where each vertex is a 90 degree angle, and the length of each angle varies from [0,k].",
  "a_41": "https://github.com/cardadfar/After-Effects-Right-Angle-Wireframes",
  "p_42": "A link to the script is provided above.",
  "i_42": "hibikase/wireframe.png",
  "d_42": "Procedurally generated wireframes",
  "p_43": "I keyframed the path completion of the shapes such that over time, they would draw out more and more on the canvas, thus populating the background. The text above it that would jitter was a result of the same effect during the chorus where I would create text layers for each individual character and randomly assign their position over time."
}
